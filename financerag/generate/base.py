from typing import Any, Dict, List, Optional

from pydantic import BaseModel


class BaseGenerator(BaseModel):
    """
    Base class for text generation models. This class is intended to be extended by specific
    text generation models, and provides a structure for initializing the model and handling
    generation tasks.

    Attributes:
        model (`Any`):
            The underlying model used for text generation.
        results (`Optional[Dict[str, Any]]`, defaults to `None`):
            Stores the results generated by the model, if available.

    Methods:
        model_post_init(__context: Any):
            Initializes the results attribute if it's not already set.
        generation(messages: Dict[str, List[Dict[str, str]]], **kwargs):
            Abstract method for generating text based on input messages. Must be implemented
            in the subclass.
    """

    model: Any
    results: Optional[Dict[str, Any]] = None

    def model_post_init(self, __context: Any) -> None:
        """
        Post-initialization method to ensure the results attribute is initialized.

        Args:
            __context (`Any`):
                Additional context or configuration for initialization (typically unused).

        If the `results` attribute is `None`, this method initializes it as an empty dictionary.
        """
        if self.results is None:
            self.results = {}

    def generation(
        self, messages: Dict[str, List[Dict[str, str]]], **kwargs
    ) -> Dict[str, str]:
        """
        Abstract method to generate text based on input messages.
        This method must be overridden in subclasses with the specific generation logic.

        Args:
            messages (`Dict[str, List[Dict[str, str]]]`):
                A dictionary where the key is the query ID, and the value is a list of
                dictionaries representing the messages or input texts for the generation task.
            **kwargs:
                Additional keyword arguments to pass to the text generation model.

        Returns:
            `Dict[str, str]`:
                A dictionary where the key is the query ID, and the value is the generated text.

        Raises:
            `NotImplementedError`:
                This method is abstract and should be implemented by any subclass.
        """
        raise NotImplementedError
